import React, { useState } from 'react';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import 'moment/locale/es';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { Card, CardContent, Typography, IconButton, Grid, Button, MenuItem, FormControl, Select, InputLabel, Tabs, Tab } from '@material-ui/core';
import DeleteIcon from '@material-ui/icons/Delete';
import CheckCircleIcon from '@material-ui/icons/CheckCircleOutline';
import RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';

moment.locale('es');
const localizer = momentLocalizer(moment);

const cursosEjemplo = [
    { id: 1, nombre: '4° Básico B' },
    { id: 2, nombre: '5° Básico A' }
];

const eventosEjemplo = {
    1: [
        { start: new Date(2025, 2, 3, 8, 0), end: new Date(2025, 2, 3, 9, 30), title: '08:00 Bloque de 90 mins.' },
        { start: new Date(2025, 2, 3, 9, 30), end: new Date(2025, 2, 3, 9, 45), title: '09:30 Recreo de 15 mins.' },
        { start: new Date(2025, 2, 3, 9, 45), end: new Date(2025, 2, 3, 11, 15), title: '09:45 Bloque de 90 mins.' }
    ]
};

const horariosEjemplo = {
    '2025-03-03': [
        { start: '08:00', end: '09:30', bloque: 'Bloque 1', duracion: '90 Minutos', asignatura: 'Matemática', profesor: 'Walter Alejandro Castro', estado: { oa: true, leccionario: true, asistencia: true, firma: true } },
        { start: '09:30', end: '09:45', bloque: 'Recreo', duracion: '15 Minutos', asignatura: 'Recreo', profesor: '', estado: { oa: false, leccionario: false, asistencia: false, firma: false } }
    ]
};

const BloqueHorario = ({ horario }) => {
    const [expanded, setExpanded] = useState(false);
    const [tabIndex, setTabIndex] = useState(0);
    const [objetivosAprendizaje, setObjetivosAprendizaje] = useState([]);


const [nivelSeleccionado, setNivelSeleccionado] = useState("4° Básico");
const [asignaturaSeleccionada, setAsignaturaSeleccionada] = useState("Matemática");
const [actividadRealizada, setActividadRealizada] = useState("");

 const [estadoCirculos, setEstadoCirculos] = useState({
        oa: false,
        leccionario: false,
        asistencia: false,
        firma: false
    });

const handleDeclararOAyActividad = () => {
    if (tabIndex === 1) { // Solo se activan en el tab "Leccionario"
        setEstadoCirculos(prevState => ({
            ...prevState,
            oa: true,
            leccionario: true
        }));
    }
};




// Lista de ejemplos de OA
    const objetivosEjemplo = [
        { id: 1, texto: "OA1: Comprender textos orales relacionados con temas conocidos o de otras asignaturas" },
        { id: 2, texto: "OA2: Ejecutar actividades físicas de intensidad moderada" },
        { id: 3, texto: "OA3: Practicar juegos deportivos con reglas y espacios adaptados" }
    ];

    const [oaSeleccionado, setOaSeleccionado] = useState("");

    const agregarOA = () => {
        if (oaSeleccionado) {
            const nuevoOA = objetivosEjemplo.find((oa) => oa.id === parseInt(oaSeleccionado));
            if (nuevoOA && !objetivosAprendizaje.some((oa) => oa.id === nuevoOA.id)) {
                setObjetivosAprendizaje([...objetivosAprendizaje, nuevoOA]);
            }
        }
    };

    const eliminarOA = (id) => {
        setObjetivosAprendizaje(objetivosAprendizaje.filter((oa) => oa.id !== id));
    };


    return (
        <Card style={{ marginBottom: '10px', background: horario.asignatura === 'Recreo' ? '#FDF6C3' : '#FFF' }}>
            <CardContent>
        
                <Grid container alignItems="center" spacing={2}>

                    <Grid item xs={10}>
                        <Typography variant="h6">            
                            {horario.start} - {horario.end} | <strong>{horario.bloque}</strong> ({horario.duracion})
                        </Typography>
                        <Typography variant="body1">
                            <strong>{horario.asignatura}</strong> {horario.profesor && `- ${horario.profesor}`}
                        </Typography>
                    </Grid>

                    <Grid item xs={2}>
                        <IconButton color="secondary">
                            <DeleteIcon />
                        </IconButton>
                    </Grid>
                </Grid>


                {horario.asignatura !== 'Recreo' && (



                   <Grid container spacing={1} justifyContent="center" style={{ marginBottom: '10px' }}>
    {['oa', 'leccionario', 'asistencia', 'firma'].map((key, index) => (
        <Grid item key={key}>

            <IconButton onClick={() => setExpanded(true)}>
   		 {(index < 2 && estadoCirculos[key]) ? (
      	  <CheckCircleIcon style={{ color: '#007BFF', fontSize: 32 }} />
    		) : (
    	    <RadioButtonUncheckedIcon style={{ color: '#CCC', fontSize: 32 }} />
    		)}
		</IconButton>



            <Typography variant="caption" display="block" align="center">
                {key.charAt(0).toUpperCase() + key.slice(1)}
            </Typography>
        </Grid>
    ))}
</Grid>


                )}
                {expanded && (
  
                  <>
  <Tabs
    value={tabIndex}
    onChange={(event, newValue) => setTabIndex(newValue)}
    variant="fullWidth"
    style={{
        backgroundColor: '#E3F2FD',
        borderRadius: '5px',
        borderBottom: '2px solid #ddd',
        display: 'flex',
        justifyContent: 'space-around',
    }}
>
    <Tab 
        label="Planificación"
        style={{ 
            backgroundColor: tabIndex === 0 ? '#1976D2' : '#E3F2FD', 
            color: tabIndex === 0 ? 'white' : 'black',
            fontWeight: 'bold',
            flex: 1,
            textAlign: 'center'
        }} 
    />
    <Tab 
        label="Leccionario"
        style={{ 
            backgroundColor: tabIndex === 1 ? '#1976D2' : '#E3F2FD', 
            color: tabIndex === 1 ? 'white' : 'black',
            fontWeight: 'bold',
            flex: 1,
            textAlign: 'center'
        }} 
    />
    <Tab 
        label="Asistencia"
        style={{ 
            backgroundColor: tabIndex === 2 ? '#1976D2' : '#E3F2FD', 
            color: tabIndex === 2 ? 'white' : 'black',
            fontWeight: 'bold',
            flex: 1,
            textAlign: 'center'
        }} 
    />
    <Tab 
        label="Observaciones"
        style={{ 
            backgroundColor: tabIndex === 3 ? '#1976D2' : '#E3F2FD', 
            color: tabIndex === 3 ? 'white' : 'black',
            fontWeight: 'bold',
            flex: 1,
            textAlign: 'center'
        }} 
    />
    <Tab 
        label="Firma Digital"
        style={{ 
            backgroundColor: tabIndex === 4 ? '#1976D2' : '#E3F2FD', 
            color: tabIndex === 4 ? 'white' : 'black',
            fontWeight: 'bold',
            flex: 1,
            textAlign: 'center'
        }} 
    />
</Tabs>

{/* Contenido de los Tabs */}
<div style={{ padding: '20px', backgroundColor: '#F8FAFC', borderRadius: '5px', marginTop: '10px' }}>
    {tabIndex === 0 && ( 
        <>
            <Typography variant="body1" style={{ marginBottom: '15px' }}>
                Asigne a este bloque la planificación de clase, de su banco.
            </Typography>
            <Grid container spacing={2} style={{ marginTop: '10px' }}>
                <Grid item xs={4}>
                    <FormControl variant="outlined" fullWidth>
                        <InputLabel>Nivel</InputLabel>
                        <Select>
                            <MenuItem value="Cuarto Básico">Cuarto Básico</MenuItem>
                            <MenuItem value="Quinto Básico">Quinto Básico</MenuItem>
                        </Select>
                    </FormControl>
                </Grid>

                <Grid item xs={4}>
                    <FormControl variant="outlined" fullWidth>
                        <InputLabel>Curso</InputLabel>
                        <Select>
                            <MenuItem value="4° Básico B">4° Básico B</MenuItem>
                            <MenuItem value="5° Básico A">5° Básico A</MenuItem>
                        </Select>
                    </FormControl>
                </Grid>

                <Grid item xs={4}>
                    <FormControl variant="outlined" fullWidth>
                        <InputLabel>Asignatura</InputLabel>
                        <Select>
                            <MenuItem value="Matemática">Matemática</MenuItem>
                            <MenuItem value="Lenguaje">Lenguaje</MenuItem>
                            <MenuItem value="Historia">Historia</MenuItem>
                        </Select>
                    </FormControl>
                </Grid>
            </Grid>
        </>
    )}


{tabIndex === 1 && (
    <>
        <Typography variant="body1" style={{ marginBottom: "15px" }}>
            Declare los atributos curriculares trabajados en este bloque.
        </Typography>

        {/* Sección de Nivel y Asignatura en la misma línea */}
        <Grid container spacing={2} alignItems="center">
            {/* Nivel */}
            <Grid item xs={6} sm={4}>
                <FormControl variant="outlined" fullWidth>
                    <InputLabel>Nivel</InputLabel>
                    <Select
                        value={nivelSeleccionado}
                        onChange={(e) => setNivelSeleccionado(e.target.value)}
                        label="Nivel"
                    >
                        <MenuItem value="4° Básico">4° Básico</MenuItem>
                        <MenuItem value="5° Básico">5° Básico</MenuItem>
                    </Select>
                </FormControl>
            </Grid>

            {/* Asignatura */}
            <Grid item xs={6} sm={4}>
                <FormControl variant="outlined" fullWidth>
                    <InputLabel>Asignatura</InputLabel>
                    <Select
                        value={asignaturaSeleccionada}
                        onChange={(e) => setAsignaturaSeleccionada(e.target.value)}
                        label="Asignatura"
                    >
                        <MenuItem value="Matemática">Matemática</MenuItem>
                        <MenuItem value="Lenguaje">Lenguaje</MenuItem>
                        <MenuItem value="Historia">Historia</MenuItem>
                        <MenuItem value="Educación Física">Educación Física</MenuItem>
                    </Select>
                </FormControl>
            </Grid>

            {/* Selector de Objetivo de Aprendizaje */}
            <Grid item xs={12} sm={4}>
                <FormControl variant="outlined" fullWidth>
                    <InputLabel>Objetivos de Aprendizaje</InputLabel>
                    <Select
                        value={oaSeleccionado}
                        onChange={(e) => setOaSeleccionado(e.target.value)}
                        label="Objetivos de Aprendizaje"
                    >
                        {objetivosEjemplo.map((oa) => (
                            <MenuItem key={oa.id} value={oa.id}>
                                {oa.texto}
                            </MenuItem>
                        ))}
                    </Select>
                </FormControl>
            </Grid>
        </Grid>

        {/* Botón para agregar OA */}
        <Grid container justifyContent="flex-start" style={{ marginTop: "10px" }}>
            <Button variant="contained" color="primary" onClick={agregarOA}>
                + Agregar OA Personalizado
            </Button>
        </Grid>

        {/* Lista de OA Agregados */}
        <div style={{ marginTop: "20px" }}>
            {objetivosAprendizaje.length > 0 ? (
           <>            
                {objetivosAprendizaje.map((oa) => (
                    <React.Fragment key={oa.id}> 
                    <Grid
                        container
                        key={oa.id}
                        alignItems="center"
                        spacing={2}
                        style={{
                            backgroundColor: "#F1F8E9",
                            padding: "10px",
                            borderRadius: "5px",
                            marginBottom: "10px",
                        }}
                    >
                        <Grid item xs={10}>
                            <Typography variant="body1">
                                <strong>{oa.texto}</strong>
                            </Typography>
                        </Grid>
                        <Grid item xs={2}>
                            <IconButton onClick={() => eliminarOA(oa.id)} color="secondary">
                                <DeleteIcon />
                            </IconButton>
                        </Grid>
                    </Grid>

          
  



                </React.Fragment>
            ))}
        </>
               
            ) : (
                <Typography variant="body2" color="textSecondary">
                    No hay objetivos de aprendizaje agregados.
                </Typography>
            )}
        </div>

        {/* Sección de Actividades Realizadas */}
        <Typography variant="h6" style={{ marginTop: "20px" }}>
            Actividades Realizadas en este bloque:
        </Typography>

        <Grid container alignItems="center" spacing={2} style={{ marginBottom: "10px" }}>
            <Grid item xs={12}>
                <textarea
                    rows="4"
                    style={{
                        width: "100%",
                        padding: "10px",
                        borderRadius: "5px",
                        border: "1px solid #ccc",
                        fontSize: "16px",
                        resize: "none",
                    }}
                    placeholder="Ingrese la actividad realizada..."
                    value={actividadRealizada}
                    onChange={(e) => setActividadRealizada(e.target.value)}
                />
            </Grid>
        </Grid>




            {/* Botón para activar los círculos */}
                <Button
                    variant="contained"
                    color="primary"
                    style={{ marginTop: "10px" }}
                    onClick={handleDeclararOAyActividad}
                >
                    ✅ Declarar OA y Actividad
                </Button>
    </>
)}




</div>


                    </>


                )}


            </CardContent>
        </Card>
    );
};



const CalendarioHorarios = () => {
    const [cursoSeleccionado, setCursoSeleccionado] = useState(1);
    const [diaSeleccionado, setDiaSeleccionado] = useState(null);

    return (
        <div style={{ padding: '20px', textAlign: 'center' }}>
            <h2>Gestión de Horarios</h2>

            {/* Agregamos el ListBox de selección de curso */}
            <FormControl variant="outlined" style={{ minWidth: 250, marginBottom: '20px' }}>
                <InputLabel>Seleccionar Curso</InputLabel>
                <Select
                    value={cursoSeleccionado}
                    onChange={(event) => setCursoSeleccionado(event.target.value)}
                    label="Seleccionar Curso"
                >
                    {cursosEjemplo.map((curso) => (
                        <MenuItem key={curso.id} value={curso.id}>
                            {curso.nombre}
                        </MenuItem>
                    ))}
                </Select>
            </FormControl>

            {/* Vista del Calendario Mensual o Diaria */}
            {!diaSeleccionado ? (
                <Calendar
                    localizer={localizer}
                    events={eventosEjemplo[cursoSeleccionado] || []}
                    startAccessor="start"
                    endAccessor="end"
                    style={{ height: 500 }}
                    onSelectEvent={(event) => setDiaSeleccionado(moment(event.start).format('YYYY-MM-DD'))}
                />
            ) : (
                <>
                    <Button variant="contained" color="secondary" onClick={() => setDiaSeleccionado(null)}>
                        Volver a Vista Mensual
                    </Button>
                    {horariosEjemplo[diaSeleccionado]?.map((horario, index) => (
                        <BloqueHorario key={index} horario={horario} />
                    ))}
                </>
            )}
        </div>
    );
};

export default CalendarioHorarios;
