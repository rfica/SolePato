const sql = require('mssql');
const { poolPromise } = require('../../config/db'); // Asegúrate de que esta configuración es correcta

// Obtener lista de colegios
exports.obtenerColegios = async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query(`
            SELECT OrganizationId, Name 
            FROM Organization 
            WHERE RefOrganizationTypeId = 10  -- Asegura que este ID corresponde a colegios en tu BD
        `);

        res.status(200).json(result.recordset);
    } catch (error) {
        console.error("❌ Error al obtener colegios:", error);
        res.status(500).json({ error: "Error al obtener colegios." });
    }
};

// Obtener los cursos según el colegio seleccionado
exports.obtenerCursosPorColegio = async (req, res) => {
    const { colegioId } = req.params;

    if (!colegioId || isNaN(colegioId)) {
        return res.status(400).json({ message: "El ID del colegio es obligatorio y debe ser un número válido." });
    }

    try {
        const pool = await poolPromise;

        const query = `
           WITH RecursiveHierarchy AS (
    -- Paso inicial: Obtener la jerarquía desde el colegio
    SELECT 
        rel.OrganizationId, 
        rel.Parent_OrganizationId,
        org.Name,
        org.RefOrganizationTypeId
    FROM 
        OrganizationRelationship rel
    INNER JOIN 
        Organization org ON rel.OrganizationId = org.OrganizationId
    WHERE 
        rel.Parent_OrganizationId = @ColegioId

    UNION ALL

    -- Recorremos la jerarquía recursivamente
    SELECT 
        rel.OrganizationId, 
        rel.Parent_OrganizationId,
        org.Name,
        org.RefOrganizationTypeId
    FROM 
        OrganizationRelationship rel
    INNER JOIN 
        Organization org ON rel.OrganizationId = org.OrganizationId
    INNER JOIN 
        RecursiveHierarchy rh ON rel.Parent_OrganizationId = rh.OrganizationId
),
Grados AS (
    -- Obtener los grados dentro de la jerarquía del colegio
    SELECT 
        rel.OrganizationId AS GradoId,
        rel.Parent_OrganizationId AS CodigoEnsenanzaId,
        CAST(org.Name AS NVARCHAR(128)) AS GradoName
    FROM 
        OrganizationRelationship rel
    INNER JOIN 
        Organization org ON rel.OrganizationId = org.OrganizationId
    INNER JOIN 
        RefOrganizationType ref ON org.RefOrganizationTypeId = ref.RefOrganizationTypeId
    WHERE 
        rel.Parent_OrganizationId IN (SELECT OrganizationId FROM RecursiveHierarchy)
        AND ref.RefOrganizationElementTypeId = 46 -- Grados
),
Letras AS (
    -- Obtener las letras asociadas a los grados
    SELECT 
        rel.OrganizationId AS LetraId,
        rel.Parent_OrganizationId AS GradoId,
        CAST(org.Name AS NVARCHAR(128)) AS LetraName
    FROM 
        OrganizationRelationship rel
    INNER JOIN 
        Organization org ON rel.OrganizationId = org.OrganizationId
    INNER JOIN 
        RefOrganizationType ref ON org.RefOrganizationTypeId = ref.RefOrganizationTypeId
    WHERE 
        rel.Parent_OrganizationId IN (SELECT GradoId FROM Grados)
        AND ref.RefOrganizationElementTypeId = 21 -- Letras
)
-- Obtener los cursos con su OrganizationId
SELECT DISTINCT
    CONCAT(g.GradoName, ' - ', COALESCE(l.LetraName, '')) AS Curso,
    l.LetraId AS CursoOrganizationId, -- El ID del curso en sí
    g.GradoName, -- Incluir para ORDER BY
    l.LetraName  -- Incluir para ORDER BY
FROM 
    Grados g
LEFT JOIN 
    Letras l ON g.GradoId = l.GradoId
ORDER BY 
    g.GradoName, l.LetraName;

        `;

        const result = await pool.request()
            .input("ColegioId", sql.Int, colegioId)
            .query(query);

        res.status(200).json(result.recordset);
    } catch (error) {
        console.error("Error al obtener los cursos:", error);
        res.status(500).json({ message: "Error al obtener los cursos.", error: error.message });
    }
};




exports.obtenerEventosPorCurso = async (req, res) => {
    const { cursoId } = req.params;

    if (!cursoId || isNaN(cursoId)) {
        return res.status(400).json({ message: "El ID del curso es obligatorio y debe ser un número válido." });
    }

    try {
        const pool = await poolPromise;

        /******************************************************
         * 1) OBTENER ID(s) de Calendario(s) para este curso
         ******************************************************/
        const calendarsResult = await pool.request()
            .input("CursoOrgId", sql.Int, cursoId)
            .query(`
                SELECT 
                    OrganizationCalendarId, 
                    OrganizationId, 
                    CalendarCode, 
                    CalendarDescription, 
                    CalendarYear
                FROM OrganizationCalendar
                WHERE OrganizationId = @CursoOrgId
            `);

        const listaCalendarios = calendarsResult.recordset;
        if (listaCalendarios.length === 0) {
            // No hay calendarios
            return res.status(200).json([]);
        }
        const calendarIds = listaCalendarios.map(c => c.OrganizationCalendarId);

        /******************************************************
         * 2) OBTENER las sesiones (OrganizationCalendarSession)
         ******************************************************/
        const sessionsResult = await pool.request().query(`
            SELECT 
                OrganizationCalendarSessionId,
                OrganizationCalendarId,
                BeginDate,
                EndDate,
                Code,
                Description,
                InstructionalMinutes
            FROM OrganizationCalendarSession
            WHERE OrganizationCalendarId IN (${calendarIds.join(',')})
        `);

        const listaSesiones = sessionsResult.recordset;

        // Determinar el rango [minBegin..maxEnd] de TODAS las sesiones
        let minBegin = null;
        let maxEnd = null;
        listaSesiones.forEach(sess => {
            if (sess.BeginDate) {
                const bd = new Date(sess.BeginDate);
                if (!minBegin || bd < minBegin) minBegin = bd;
            }
            if (sess.EndDate) {
                const ed = new Date(sess.EndDate);
                if (!maxEnd || ed > maxEnd) maxEnd = ed;
            }
        });



        if (!minBegin || !maxEnd) {
            // Si no hay fechas, devolvemos vacío o algo
            return res.status(200).json([]);
        }

        // Sacar todos los IDs de sesión
        const sessionIds = listaSesiones.map(s => s.OrganizationCalendarSessionId);

        /***************************************************************
         * 3) OBTENER CLASES (CourseSectionSchedule) con JOIN a:
         *    - Organization (para saber nombre asignatura)
         *    - OrganizationPersonRole + Person (para profesor)
         ***************************************************************/
        const clasesQuery = `
            SELECT 
                css.CourseSectionScheduleId,
                css.OrganizationId,   -- la "asignatura"
                css.ClassMeetingDays,
                CONVERT(VARCHAR(8), css.ClassBeginningTime, 108) AS ClassBeginningTime,
                CONVERT(VARCHAR(8), css.ClassEndingTime, 108)   AS ClassEndingTime,
                css.ClassPeriod,
                css.OrganizationCalendarSessionId,

                -- A: la asignatura
                A.OrganizationId AS AsignaturaId,   
                A.Name AS AsignaturaName,

                -- Profesor (si existe)
                P.PersonId AS ProfesorId,
                CONCAT(P.FirstName, ' ', P.LastName) AS ProfesorName

            FROM CourseSectionSchedule css

            -- Unir con la "asignatura"
            LEFT JOIN Organization A
                ON css.OrganizationId = A.OrganizationId

            -- Unir con la Persona/Profesor
            LEFT JOIN OrganizationPersonRole OPR
                ON A.OrganizationId = OPR.OrganizationId
                AND OPR.RoleId = 5  -- 5 = rol de profesor (ajusta si tu DB usa otro valor)

            LEFT JOIN Person P
                ON OPR.PersonId = P.PersonId

            WHERE css.OrganizationCalendarSessionId IN (${sessionIds.join(',')})
        `;
        const courseScheduleResult = await pool.request().query(clasesQuery);
        const schedulesClases = courseScheduleResult.recordset;

        /***************************************************************
         * 4) OBTENER RECREOS (RecessSchedule)
         *    Filtra por OrganizationId = curso, etc.
         ***************************************************************/
        const recessQuery = `
            SELECT 
                rs.RecessScheduleId,
                rs.OrganizationId,
                rs.ClassMeetingDays,
                CONVERT(VARCHAR(8), rs.RecessBeginningTime, 108) AS RecessBeginningTime,
                CONVERT(VARCHAR(8), rs.RecessEndingTime, 108)   AS RecessEndingTime,
                rs.ClassPeriod,
                rs.RecordStartDateTime,
                rs.RecordEndDateTime
            FROM RecessSchedule rs
            WHERE rs.OrganizationId = @CursoOrgId
        `;
        const recessResult = await pool.request()
            .input("CursoOrgId", sql.Int, cursoId)
            .query(recessQuery);

        const schedulesRecreos = recessResult.recordset;

        /************************************************************
         * 5) Para ir día a día en [minBegin..maxEnd], 
         *    checar qué clases/recreos tocan ese día.
         ************************************************************/
        const mapDiaSemana = {
            'Domingo': 0,
            'Lunes': 1,
            'Martes': 2,
            'Miércoles': 3,
            'Miercoles': 3,
            'Jueves': 4,
            'Viernes': 5,
            'Sábado': 6,
            'Sabado': 6
        };

        let eventos = [];

        // Función auxiliar: saber si un day entra en la [BeginDate..EndDate] de una session
        function dayBelongsToAnySession(day) {
            return listaSesiones.some(sess => {
                if (!sess.BeginDate || !sess.EndDate) return false;
                const b = new Date(sess.BeginDate);
                const e = new Date(sess.EndDate);
                return day >= b && day <= e;
            });
        }

        // Recorremos cada día
        for (let day = new Date(minBegin); day <= maxEnd; day.setDate(day.getDate() + 1)) {
            const dayOfWeek = day.getDay();  // 0=Dom,1=Lun,...
            // Filtramos:
            //  (a) CLASES => must coincide dayOfWeek con sc.ClassMeetingDays
            //               y su sessionId esté en una session que cubra este day
            schedulesClases.forEach(sc => {
                if (!sc.ClassMeetingDays) return;
                const mapped = mapDiaSemana[sc.ClassMeetingDays.trim()] ?? -1;
                if (mapped !== dayOfWeek) return;

                // ¿Pertenece la fecha a la session de sc?
                // Buscamos la session con id = sc.OrganizationCalendarSessionId
                const sessionObj = listaSesiones.find(s => s.OrganizationCalendarSessionId === sc.OrganizationCalendarSessionId);
                if (!sessionObj) return;
                // Checar si day está dentro [BeginDate..EndDate]
                const b = new Date(sessionObj.BeginDate);
                const e = new Date(sessionObj.EndDate);
                if (day < b || day > e) return; // no cae en el rango de esa sesión

                if (!sc.ClassBeginningTime || !sc.ClassEndingTime) return;
                const [bH, bM] = sc.ClassBeginningTime.split(':');
                const [eH, eM] = sc.ClassEndingTime.split(':');

                const start = new Date(day.getFullYear(), day.getMonth(), day.getDate(), bH, bM);
                const end   = new Date(day.getFullYear(), day.getMonth(), day.getDate(), eH, eM);

                // Armamos title + extras
                const bloque = sc.ClassPeriod || 'Bloque';
                const title = `${sc.ClassBeginningTime} Bloque de clases (${bloque})`;

                // Incluimos Asignatura/Profesor en “extended props” o directamente en el title
                const asignaturaStr = sc.AsignaturaName || 'Asignatura';
                const profeStr = sc.ProfesorName || '';
                // Ejemplo: en .title le agregamos un salto de línea:
                const fullTitle = `${title}\n${asignaturaStr}\nProf: ${profeStr}`;

                eventos.push({
                    start,
                    end,
                    title: fullTitle,    // lo que “Calendar” mostrará
                    asignatura: asignaturaStr,
                    profesor: profeStr,
                    asignaturaId: sc.AsignaturaId,
                });
            });

            //  (b) RECREOS => se filtra día
            schedulesRecreos.forEach(sr => {
                if (!sr.ClassMeetingDays) return;
                const mapped = mapDiaSemana[sr.ClassMeetingDays.trim()] ?? -1;
                if (mapped !== dayOfWeek) return;

                // Opcional: ver si day >= sr.RecordStartDateTime y day <= sr.RecordEndDateTime
                if (sr.RecordStartDateTime && sr.RecordEndDateTime) {
                    const b = new Date(sr.RecordStartDateTime);
                    const e = new Date(sr.RecordEndDateTime);
                    if (day < b || day > e) return;
                } else {
                    // Podrías filtrar por las sessions, si procede
                    const entra = dayBelongsToAnySession(day);
                    if (!entra) return;
                }

                // Parsear hora
                if (!sr.RecessBeginningTime || !sr.RecessEndingTime) return;
                const [bH, bM] = sr.RecessBeginningTime.split(':');
                const [eH, eM] = sr.RecessEndingTime.split(':');

                const start = new Date(day.getFullYear(), day.getMonth(), day.getDate(), bH, bM);
                const end   = new Date(day.getFullYear(), day.getMonth(), day.getDate(), eH, eM);

                const bloque = sr.ClassPeriod || 'Recreo';
                const title = `${sr.RecessBeginningTime} Recreo de ${bloque}`;

                eventos.push({
                    start,
                    end,
                    title,
                    asignatura: 'Recreo',
                    profesor: ''
                });
            });
        }

        // Listo: enviamos
        return res.status(200).json(eventos);

    } catch (error) {
        console.error("Error al obtener eventos del curso:", error);
        return res.status(500).json({ 
            message: "Error al obtener los eventos.", 
            error: error.message 
        });
    }
};



exports.obtenerOAsPorAsignatura = async (req, res) => {
    const { asignaturaId } = req.params;
    
    // Validamos que sea un número
    if (!asignaturaId || isNaN(asignaturaId)) {
        return res.status(400).json({ error: 'El ID de la asignatura es obligatorio y debe ser un número.' });
    }

    try {
        const pool = await poolPromise;

        // Haremos JOIN entre la tabla OrganizationLearningObjective y LearningObjective,
        // de modo que sacamos los OA relacionados a esa Asignatura (OrganizationId).
        const query = `
            SELECT 
                LO.LearningObjectiveId,
                LO.ObjectiveCode,
                LO.ObjectiveDescription
            FROM OrganizationLearningObjective OLO
            JOIN LearningObjective LO
                ON OLO.LearningObjectiveId = LO.LearningObjectiveId
            WHERE OLO.OrganizationId = @asignaturaId
            ORDER BY LO.LearningObjectiveId
        `;
        
        const result = await pool.request()
            .input('asignaturaId', sql.Int, asignaturaId)
            .query(query);

        // Retornamos el array de OAs
        return res.status(200).json(result.recordset);
    } catch (error) {
        console.error('Error al obtener OAs:', error);
        return res.status(500).json({ error: 'Error al obtener objetivos de aprendizaje.' });
    }
};
