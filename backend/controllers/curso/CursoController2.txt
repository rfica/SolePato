const sql = require('mssql');
//const { poolPromise } = require('../config/db');
const { poolPromise } = require('../../config/db');

exports.crearCurso = async (req, res) => {
  const {
    nombreCurso, nivel, letra, capacidadMaxima, profesorJefe, colegioId,
    codigoEnsenanzaId, gradoId, letraName
  } = req.body;

  console.log('Datos recibidos para la creación del curso:', req.body);

  try {
    const pool = await poolPromise;

    if (!pool) {
      console.error('No se pudo obtener una conexión a la base de datos');
      return res.status(500).send('Error de conexión con la base de datos');
    }

    const transaction = new sql.Transaction(pool);
    await transaction.begin();

    try {
      // Obtener o insertar Código de Enseñanza
      let codigoEnsenanzaOrgId = await getExistingOrgId(transaction, codigoEnsenanzaId, 'Código de Enseñanza');
      if (!codigoEnsenanzaOrgId) {
        const codigoDescripcion = await getOrganizationTypeDescription(codigoEnsenanzaId);
        codigoEnsenanzaOrgId = await insertRelationship(
          transaction,
          codigoEnsenanzaId,
          codigoDescripcion,
          colegioId,
          codigoEnsenanzaId
        );
      }

      // Obtener o insertar Grado
      let gradoOrgId = await getExistingOrgId(transaction, gradoId, 'Grado', codigoEnsenanzaOrgId);
      if (!gradoOrgId) {
        const gradoDescripcionCompleta = await getOrganizationTypeFullDescription(gradoId);
        gradoOrgId = await insertRelationship(
          transaction,
          gradoId,
          gradoDescripcionCompleta,
          codigoEnsenanzaOrgId,
          gradoId
        );
      }

      // Insertar curso o letra bajo el grado
      let cursoOrgId;
      if (letraName) {
        cursoOrgId = await insertRelationship(
          transaction,
          null,
          letraName,
          gradoOrgId,
          null,
          letraName
        );
      } else {
        cursoOrgId = gradoOrgId;
      }

      // Inserción en Course para el curso específico
      await transaction.request()
        .input('OrganizationId', sql.Int, cursoOrgId)
        .query('INSERT INTO Course (OrganizationId) VALUES (@OrganizationId)');

      // Inserción en CourseSection para capacidad máxima
      await transaction.request()
        .input('OrganizationId', sql.Int, cursoOrgId)
        .input('MaximumCapacity', sql.Int, capacidadMaxima || 0)
        .query('INSERT INTO CourseSection (CourseId, OrganizationId, MaximumCapacity) VALUES (@OrganizationId, @OrganizationId, @MaximumCapacity)');

      // Relación con el profesor jefe en OrganizationPersonRole
      if (profesorJefe) {
        await transaction.request()
          .input('OrganizationId', sql.Int, cursoOrgId)
          .input('PersonId', sql.Int, profesorJefe)
          .input('RoleId', sql.Int, 5) // Asumiendo que el rol 5 es para Profesor Jefe
          .query('INSERT INTO OrganizationPersonRole (OrganizationId, PersonId, RoleId) VALUES (@OrganizationId, @PersonId, @RoleId)');
      }

      await transaction.commit();
      res.status(201).json({ message: 'Curso y su jerarquía creados correctamente.' });
    } catch (error) {
      console.error('Error al realizar alguna inserción:', error.message);
      await transaction.rollback();
      res.status(500).send('Hubo un error al crear el curso y su jerarquía.');
    }
  } catch (error) {
    console.error('Error general:', error.message);
    res.status(500).send('Error en la creación del curso y su jerarquía.');
  }
};

// Función para obtener la descripción completa del tipo de organización (Código - Descripción)
async function getOrganizationTypeFullDescription(refOrganizationTypeId) {
  const pool = await poolPromise;
  const result = await pool.request()
    .input('RefOrganizationTypeId', sql.Int, refOrganizationTypeId)
    .query('SELECT Code, Description FROM RefOrganizationType WHERE RefOrganizationTypeId = @RefOrganizationTypeId');

  if (result.recordset.length > 0) {
    const { Code, Description } = result.recordset[0];
    return `${Code} - ${Description}`;
  }
  return null;
}

// Función para obtener la descripción del tipo de organización (solo descripción)
async function getOrganizationTypeDescription(refOrganizationTypeId) {
  const pool = await poolPromise;
  const result = await pool.request()
    .input('RefOrganizationTypeId', sql.Int, refOrganizationTypeId)
    .query('SELECT Description FROM RefOrganizationType WHERE RefOrganizationTypeId = @RefOrganizationTypeId');

  return result.recordset.length > 0 ? result.recordset[0].Description : null;
}

// Función auxiliar para obtener OrganizationId existente
async function getExistingOrgId(transaction, fieldId, fieldName, parentId = null) {
  const query = parentId
    ? 'SELECT Organization.OrganizationId FROM Organization INNER JOIN OrganizationRelationship ON Organization.OrganizationId = OrganizationRelationship.OrganizationId WHERE Organization.RefOrganizationTypeId = @fieldId AND OrganizationRelationship.Parent_OrganizationId = @parentId'
    : 'SELECT OrganizationId FROM Organization WHERE RefOrganizationTypeId = @fieldId';
  
  const result = await transaction.request()
    .input('fieldId', sql.Int, fieldId)
    .input('parentId', sql.Int, parentId)
    .query(query);
  
  return result.recordset.length > 0 ? result.recordset[0].OrganizationId : null;
}

// Función para insertar relaciones en la base de datos
async function insertRelationship(transaction, fieldId, name, parentId, refOrganizationTypeId) {
  const fieldResult = await transaction.request()
    .input('Name', sql.VarChar, name)
    .input('RefOrganizationTypeId', sql.Int, refOrganizationTypeId)
    .query('INSERT INTO Organization (Name, RefOrganizationTypeId) OUTPUT INSERTED.OrganizationId VALUES (@Name, @RefOrganizationTypeId)');

  const fieldOrgId = fieldResult.recordset[0].OrganizationId;

  await transaction.request()
    .input('Parent_OrganizationId', sql.Int, parentId)
    .input('Child_OrganizationId', sql.Int, fieldOrgId)
    .input('RefOrganizationRelationshipId', sql.Int, 3)
    .query('INSERT INTO OrganizationRelationship (Parent_OrganizationId, OrganizationId, RefOrganizationRelationshipId) VALUES (@Parent_OrganizationId, @Child_OrganizationId, @RefOrganizationRelationshipId)');

  return fieldOrgId;
}



// Controlador para gestionar la creación y modificación de cursos
exports.crearOActualizarCurso = async (req, res) => {
  let transaction;
  try {
    const { nombreCurso, nivel, letra, capacidadMaxima, profesorJefe, colegio, codigoEnsenanza } = req.body;

    const pool = await poolPromise;
    transaction = new sql.Transaction(pool);
    await transaction.begin();

    const requestCurso = new sql.Request(transaction);
    requestCurso.input('NombreCurso', sql.NVarChar, nombreCurso);
    requestCurso.input('CodigoEnsenanza', sql.NVarChar, codigoEnsenanza);

    // Inserción del curso
    // Relación del curso con el colegio y otros parámetros (completa esta parte)

    await transaction.commit();
    res.status(200).json({ message: 'Curso creado o actualizado exitosamente.' });
  } catch (error) {
    if (transaction) await transaction.rollback();
    console.error('Error durante la transacción:', error);
    res.status(500).json({ error: 'Error al crear o actualizar el curso.' });
  }
};

// Obtener cursos por colegio, incluyendo profesor jefe y capacidad máxima
exports.getCursosPorColegio = async (req, res) => {
  try {
    const { colegioId } = req.params;
    const pool = await poolPromise;

    // Consulta optimizada para obtener grados, letras, capacidad máxima y profesor jefe
    const result = await pool.request()
      .input('colegioId', sql.Int, colegioId)
      .query(`
        WITH RecursiveCTE AS (
    -- CTE recursiva para recorrer la jerarquía desde el colegio
    SELECT 
        O.OrganizationId, 
        O.Name, 
        ORel.OrganizationId AS ChildOrganizationId, 
        ORel.Parent_OrganizationId
    FROM 
        Organization O
    INNER JOIN 
        OrganizationRelationship ORel ON O.OrganizationId = ORel.Parent_OrganizationId
    WHERE 
        O.OrganizationId = @ColegioId

    UNION ALL

    SELECT 
        O.OrganizationId, 
        O.Name, 
        ORel.OrganizationId AS ChildOrganizationId, 
        ORel.Parent_OrganizationId
    FROM 
        Organization O
    INNER JOIN 
        OrganizationRelationship ORel ON O.OrganizationId = ORel.Parent_OrganizationId
    INNER JOIN 
        RecursiveCTE R ON ORel.Parent_OrganizationId = R.ChildOrganizationId
),

-- Grados con letras asociadas
GradosConLetras AS (
    SELECT 
        R.OrganizationId AS CodigoEnseñanzaId, 
        R.Name AS CodigoEnseñanzaName, 
        Grado.OrganizationId AS GradoId, 
        Grado.Name AS GradoName, 
        Letra.OrganizationId AS LetraId, 
        Letra.Name AS LetraName,
        ISNULL(P.PersonId, 0) AS ProfesorJefeId, 
        ISNULL(P.FirstName + ' ' + P.LastName, 'No Asignado') AS ProfesorJefe,
        ISNULL(CS.MaximumCapacity, 0) AS CapacidadMaxima
    FROM 
        RecursiveCTE R
    INNER JOIN 
        Organization Grado ON R.ChildOrganizationId = Grado.OrganizationId
    INNER JOIN 
        RefOrganizationType ROT ON Grado.RefOrganizationTypeId = ROT.RefOrganizationTypeId
    LEFT JOIN 
        OrganizationRelationship ORelLetras ON Grado.OrganizationId = ORelLetras.Parent_OrganizationId
    LEFT JOIN 
        Organization Letra ON ORelLetras.OrganizationId = Letra.OrganizationId
    LEFT JOIN 
        RefOrganizationType ROT_Letra ON Letra.RefOrganizationTypeId = ROT_Letra.RefOrganizationTypeId
        AND ROT_Letra.RefOrganizationElementTypeId = 21 -- Tipo de elemento para letras
    LEFT JOIN 
        OrganizationPersonRole OPR ON Letra.OrganizationId = OPR.OrganizationId AND OPR.RoleId = 5
    LEFT JOIN 
        Person P ON OPR.PersonId = P.PersonId
    LEFT JOIN 
        CourseSection CS ON Letra.OrganizationId = CS.OrganizationId
    WHERE 
        ROT.RefOrganizationElementTypeId = 46 -- Tipo de elemento para grados
        AND ROT_Letra.RefOrganizationElementTypeId = 21 -- Solo letras válidas
),

-- Grados sin letras asociadas
GradosSinLetras AS (
    SELECT 
        R.OrganizationId AS CodigoEnseñanzaId, 
        R.Name AS CodigoEnseñanzaName, 
        Grado.OrganizationId AS GradoId, 
        Grado.Name AS GradoName, 
        NULL AS LetraId, 
        '-' AS LetraName,
        ISNULL(P.PersonId, 0) AS ProfesorJefeId, 
        ISNULL(P.FirstName + ' ' + P.LastName, 'No Asignado') AS ProfesorJefe,
        ISNULL(CS.MaximumCapacity, 0) AS CapacidadMaxima
    FROM 
        RecursiveCTE R
    INNER JOIN 
        Organization Grado ON R.ChildOrganizationId = Grado.OrganizationId
    INNER JOIN 
        RefOrganizationType ROT ON Grado.RefOrganizationTypeId = ROT.RefOrganizationTypeId
    LEFT JOIN 
        OrganizationPersonRole OPR ON Grado.OrganizationId = OPR.OrganizationId AND OPR.RoleId = 5
    LEFT JOIN 
        Person P ON OPR.PersonId = P.PersonId
    LEFT JOIN 
        CourseSection CS ON Grado.OrganizationId = CS.OrganizationId
    WHERE 
        ROT.RefOrganizationElementTypeId = 46 -- Tipo de elemento para grados
        AND NOT EXISTS (
            SELECT 1
            FROM OrganizationRelationship ORelLetras
            JOIN Organization Letra ON ORelLetras.OrganizationId = Letra.OrganizationId
            JOIN RefOrganizationType ROT_Letra ON Letra.RefOrganizationTypeId = ROT_Letra.RefOrganizationTypeId
            WHERE ORelLetras.Parent_OrganizationId = Grado.OrganizationId
              AND ROT_Letra.RefOrganizationElementTypeId = 21 -- Solo letras válidas
        )
)

-- Unión de grados con y sin letras
SELECT 
    CodigoEnseñanzaId,
    CodigoEnseñanzaName,
    GradoId,
    GradoName,
    LetraId,
    LetraName,
    ProfesorJefeId,
    ProfesorJefe,
    CapacidadMaxima
FROM 
    GradosConLetras
UNION ALL
SELECT 
    CodigoEnseñanzaId,
    CodigoEnseñanzaName,
    GradoId,
    GradoName,
    LetraId,
    LetraName,
    ProfesorJefeId,
    ProfesorJefe,
    CapacidadMaxima
FROM 
    GradosSinLetras
ORDER BY 
    GradoName, 
    LetraName;

      `);

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: 'No se encontraron cursos para este colegio.' });
    }

    res.status(200).json(result.recordset);
  } catch (error) {
    console.error('Error obteniendo cursos por colegio:', error);
    res.status(500).json({ error: 'Error al obtener los cursos.' });
  }
};

exports.updateCurso = async (req, res) => {
  let transaction;
  try {
    const { cursoId, capacidadMaxima, profesorJefe } = req.body;
    const pool = await poolPromise;
    
    // Iniciar la transacción
    transaction = new sql.Transaction(pool);
    await transaction.begin();
    
    // Validar si el curso tiene letra o no para definir el `OrganizationId` a usar
    const courseCheckResult = await new sql.Request(transaction)
      .input('organizationId', sql.Int, cursoId)
      .query(`
        SELECT OrganizationId 
        FROM Course 
        WHERE OrganizationId = @organizationId
      `);

    // Insertar en `Course` si no existe
    if (courseCheckResult.recordset.length === 0) {
      await new sql.Request(transaction)
        .input('organizationId', sql.Int, cursoId)
        .query(`
          INSERT INTO Course (OrganizationId) 
          VALUES (@organizationId)
        `);
    }

    // Validar existencia en `CourseSection`
    const checkCapacidad = await new sql.Request(transaction)
      .input('organizationId', sql.Int, cursoId)
      .query(`
        SELECT OrganizationId 
        FROM CourseSection 
        WHERE OrganizationId = @organizationId
      `);

    // Actualizar o insertar capacidad máxima en `CourseSection`
    if (checkCapacidad.recordset.length > 0) {
      await new sql.Request(transaction)
        .input('organizationId', sql.Int, cursoId)
        .input('capacidadMaxima', sql.Int, capacidadMaxima)
        .query(`
          UPDATE CourseSection 
          SET MaximumCapacity = @capacidadMaxima 
          WHERE OrganizationId = @organizationId
        `);
    } else {
      await new sql.Request(transaction)
        .input('organizationId', sql.Int, cursoId)
        .input('capacidadMaxima', sql.Int, capacidadMaxima)
        .query(`
          INSERT INTO CourseSection (CourseId, OrganizationId, MaximumCapacity) 
          VALUES (@organizationId, @organizationId, @capacidadMaxima)
        `);
    }

    // Validar existencia en `OrganizationPersonRole` para profesor jefe
    const checkProfesor = await new sql.Request(transaction)
      .input('organizationId', sql.Int, cursoId)
      .input('roleId', sql.Int, 5) // Rol 5 para profesor jefe
      .query(`
        SELECT OrganizationId 
        FROM OrganizationPersonRole 
        WHERE OrganizationId = @organizationId 
          AND RoleId = @roleId
      `);

    // Actualizar o insertar profesor jefe en `OrganizationPersonRole`
    if (checkProfesor.recordset.length > 0) {
      await new sql.Request(transaction)
        .input('organizationId', sql.Int, cursoId)
        .input('profesorJefe', sql.Int, profesorJefe)
        .input('roleId', sql.Int, 5)
        .query(`
          UPDATE OrganizationPersonRole 
          SET PersonId = @profesorJefe 
          WHERE OrganizationId = @organizationId 
            AND RoleId = @roleId
        `);
    } else {
      await new sql.Request(transaction)
        .input('organizationId', sql.Int, cursoId)
        .input('profesorJefe', sql.Int, profesorJefe)
        .input('roleId', sql.Int, 5)
        .query(`
          INSERT INTO OrganizationPersonRole (OrganizationId, PersonId, RoleId) 
          VALUES (@organizationId, @profesorJefe, @roleId)
        `);
    }

    // Confirmar la transacción
    await transaction.commit();
    res.status(200).json({ message: 'Curso actualizado exitosamente.' });

  } catch (error) {
    if (transaction) {
      // Rollback solo si la transacción está activa
      try {
        await transaction.rollback();
      } catch (rollbackError) {
        console.error('Error al hacer rollback de la transacción:', rollbackError);
      }
    }
    console.error('Error actualizando curso:', error);
    res.status(500).json({ error: 'Error al actualizar curso.' });
  }
};
