// POST /api/notas/notas-acumuladas/guardar
exports.guardarNotasAcumuladas = async (req, res) => {
  const pool = await poolPromise;
  const transaction = new sql.Transaction(pool);
  let notasInsertadas = 0;
  let promediosInsertados = 0;
  let registrosOmitidos = 0;
  let registrosCreados = 0;
  let gruposCreados = 0;
  let notasDirectasEliminadas = 0;

  try {
    const { assessmentId, subnotas, fecha, cursoId, asignaturaId } = req.body;

    console.log('[GUARDAR_ACUMULATIVA] Iniciando con datos:', {
      assessmentId,
      fecha,
      cursoId,
      asignaturaId,
      subnotas: Array.isArray(subnotas) ? subnotas.length : 'no es array'
    });
    console.log('[GUARDAR_ACUMULATIVA] Payload subnotas detallado (primeros 5 alumnos):', JSON.stringify(subnotas.slice(0, 5)));
    
    if (!assessmentId || !Array.isArray(subnotas) || !cursoId || !asignaturaId) {
      console.error('[GUARDAR_ACUMULATIVA] Parámetros inválidos recibidos');
      return res.status(400).json({ error: 'Parámetros inválidos' });
    }

    await transaction.begin();

    // Opcional: Limpiar subnotas antiguas sin AssessmentFormId
    try {
      const cleanupResult = await new sql.Request(transaction)
        .query(`
          DELETE FROM AssessmentSubtest
          WHERE Identifier IN ('SUB1', 'SUB2') 
          AND AssessmentFormId IS NULL
          AND NOT EXISTS (
            SELECT 1 FROM AssessmentResult 
            WHERE AssessmentResult.AssessmentSubtestId = AssessmentSubtest.AssessmentSubtestId
          )
        `);
      console.log(`[GUARDAR_ACUMULATIVA] Limpieza de subnotas antiguas sin uso completada. Registros eliminados: ${cleanupResult.rowsAffected[0]}`);
    } catch (cleanupError) {
      console.log('[GUARDAR_ACUMULATIVA] No se pudieron limpiar subnotas antiguas:', cleanupError.message);
    }

    // Obtener el identificador de la evaluación principal (N1, N2, etc.)
    const assessmentQuery = await new sql.Request(transaction)
      .input('assessmentId', sql.Int, assessmentId)
      .query(`
        SELECT Identifier, Title
        FROM Assessment
        WHERE AssessmentId = @assessmentId
      `);
    
    let assessmentIdentifier = 'N1'; // Valor predeterminado
    let assessmentTitle = 'Evaluación N1'; // Valor predeterminado
    if (assessmentQuery.recordset.length > 0) {
      if (assessmentQuery.recordset[0].Identifier) {
        assessmentIdentifier = assessmentQuery.recordset[0].Identifier;
      }
      if (assessmentQuery.recordset[0].Title) {
        assessmentTitle = assessmentQuery.recordset[0].Title;
      } else {
        assessmentTitle = `Evaluación ${assessmentIdentifier}`;
      }
    }
    
    console.log(`[GUARDAR_ACUMULATIVA] Identificador de evaluación principal: ${assessmentIdentifier}, Título: ${assessmentTitle}`);

    // Obtener o crear AssessmentAdministrationId
    const adminResult = await new sql.Request(transaction)
      .input('assessmentId', sql.Int, assessmentId)
      .query(`
        SELECT TOP 1 aa.AssessmentAdministrationId
        FROM Assessment_AssessmentAdministration aa
        WHERE aa.AssessmentId = @assessmentId
      `);

    let assessmentAdministrationId;

    if (adminResult.recordset.length === 0) {
      console.log(`[GUARDAR_ACUMULATIVA] No se encontró AssessmentAdministrationId, intentando encontrar huérfana o creando nueva`);

      // Intentar encontrar una AssessmentAdministration que no esté ligada a Assessment_AssessmentAdministration
      const orphanAdminResult = await new sql.Request(transaction)
        .query(`
          SELECT TOP 1 aa.AssessmentAdministrationId
          FROM AssessmentAdministration aa
          LEFT JOIN Assessment_AssessmentAdministration aaa ON aa.AssessmentAdministrationId = aaa.AssessmentAdministrationId
          WHERE aaa.AssessmentId IS NULL -- Buscar admins sin un enlace de Assessment_AssessmentAdministration
        `);

      if(orphanAdminResult.recordset.length > 0) {
        assessmentAdministrationId = orphanAdminResult.recordset[0].AssessmentAdministrationId;
        console.log(`[GUARDAR_ACUMULATIVA] Encontrada AssessmentAdministrationId huérfana: ${assessmentAdministrationId}`);
        
        // Vincular la admin huérfana con este Assessment
        await new sql.Request(transaction)
          .input('assessmentId', sql.Int, assessmentId)
          .input('assessmentAdministrationId', sql.Int, assessmentAdministrationId)
          .query(`
            INSERT INTO Assessment_AssessmentAdministration (
              AssessmentId,
              AssessmentAdministrationId
            )
            VALUES (
              @assessmentId,
              @assessmentAdministrationId
            )
          `);
      } else {
        // Crear una nueva AssessmentAdministration
        const newAdminResult = await new sql.Request(transaction)
          .input('administrationDate', sql.Date, new Date(fecha))
          .input('startDate', sql.Date, new Date(fecha))
          .input('finishDate', sql.Date, new Date(fecha))
          .query(`
            INSERT INTO AssessmentAdministration (
              AdministrationDate,
              StartDate,
              FinishDate
            )
            OUTPUT INSERTED.AssessmentAdministrationId
            VALUES (
              @administrationDate,
              @startDate,
              @finishDate
            )
          `);
          
        assessmentAdministrationId = newAdminResult.recordset[0].AssessmentAdministrationId;
        console.log(`[GUARDAR_ACUMULATIVA] Creada nueva AssessmentAdministrationId: ${assessmentAdministrationId}`);
        
        // Vincular la nueva admin con este Assessment
        await new sql.Request(transaction)
          .input('assessmentId', sql.Int, assessmentId)
          .input('assessmentAdministrationId', sql.Int, assessmentAdministrationId)
          .query(`
            INSERT INTO Assessment_AssessmentAdministration (
              AssessmentId,
              AssessmentAdministrationId
            )
            VALUES (
              @assessmentId,
              @assessmentAdministrationId
            )
          `);
      }
    } else {
      assessmentAdministrationId = adminResult.recordset[0].AssessmentAdministrationId;
      console.log(`[GUARDAR_ACUMULATIVA] Usando AssessmentAdministrationId existente: ${assessmentAdministrationId}`);
    }

    // MEJORA 1: Extraer dinámicamente los identificadores de subnotas del payload
    let identifiers = subnotas
      .map(s => s.identifier)
      .filter((value, index, self) => value && self.indexOf(value) === index);
    
    // Si no hay identificadores específicos o son los antiguos (SUB1, SUB2), generar los nuevos
    if (identifiers.length === 0 || identifiers.includes('SUB1') || identifiers.includes('SUB2')) {
      // Crear un nuevo conjunto de identificadores usando el formato N1.1, N1.2, etc.
      const nuevosIdentificadores = {};
      
      // Si hay identificadores antiguos, mapearlos a los nuevos
      if (identifiers.includes('SUB1') || identifiers.includes('SUB2')) {
        identifiers.forEach(id => {
          if (id === 'SUB1') {
            nuevosIdentificadores[id] = `${assessmentIdentifier}.1`;
          } else if (id === 'SUB2') {
            nuevosIdentificadores[id] = `${assessmentIdentifier}.2`;
          } else {
            nuevosIdentificadores[id] = id; // Mantener otros identificadores
          }
        });
        
        // Actualizar los identificadores en las subnotas
        subnotas.forEach(subnota => {
          if (subnota.identifier && nuevosIdentificadores[subnota.identifier]) {
            console.log(`[GUARDAR_ACUMULATIVA] Mapeando identificador ${subnota.identifier} a ${nuevosIdentificadores[subnota.identifier]}`);
            subnota.identifier = nuevosIdentificadores[subnota.identifier];
          }
        });
      }
      
      // Actualizar la lista de identificadores
      identifiers = subnotas
        .map(s => s.identifier)
        .filter((value, index, self) => value && self.indexOf(value) === index);
      
      // Si aún no hay identificadores, crear los nuevos con el formato correcto
      if (identifiers.length === 0) {
        identifiers = [`${assessmentIdentifier}.1`, `${assessmentIdentifier}.2`];
        
        // Asignar estos identificadores a las subnotas existentes
        let contador = 0;
        subnotas.forEach(subnota => {
          if (!subnota.identifier) {
            subnota.identifier = identifiers[contador % 2];
            contador++;
          }
        });
      }
    }
    
    console.log(`[GUARDAR_ACUMULATIVA] Identificadores de subnotas detectados: ${JSON.stringify(identifiers)}`);

    // Crear la consulta dinámica para verificar subnotas existentes
    const placeholders = identifiers.map((_, i) => `@id${i}`).join(', ');
    const subtestQuery = `
      SELECT AssessmentSubtestId, Identifier, AssessmentFormId
      FROM AssessmentSubtest
      WHERE Identifier IN (${placeholders})
    `;
    
    const subtestRequest = new sql.Request(transaction);
    identifiers.forEach((id, index) => {
      subtestRequest.input(`id${index}`, sql.NVarChar, id);
    });
    
    const subtestResult = await subtestRequest.query(subtestQuery);

    let subtestMap = {};
    
    // MEJORA: Siempre crear y utilizar AssessmentForm
    let assessmentFormId = null;
    
    // 1. Intentar encontrar un AssessmentForm existente para este Assessment
    const formResult = await new sql.Request(transaction)
      .input('assessmentId', sql.Int, assessmentId)
      .query(`
        SELECT TOP 1 AssessmentFormId 
        FROM AssessmentForm 
        WHERE AssessmentId = @assessmentId
      `);
    
    if (formResult.recordset.length > 0) {
      // Si existe, usarlo
      assessmentFormId = formResult.recordset[0].AssessmentFormId;
      console.log(`[GUARDAR_ACUMULATIVA] Usando AssessmentFormId existente: ${assessmentFormId}`);
    } else {
      // Si no existe, crear uno nuevo con los campos mínimos necesarios
      try {
        // Crear AssessmentForm con solo el campo obligatorio
        const newFormResult = await new sql.Request(transaction)
          .input('assessmentId', sql.Int, assessmentId)
          .query(`
            INSERT INTO AssessmentForm (
              AssessmentId
            )
            OUTPUT INSERTED.AssessmentFormId
            VALUES (
              @assessmentId
            )
          `);
        
        if (newFormResult.recordset.length > 0) {
          assessmentFormId = newFormResult.recordset[0].AssessmentFormId;
          console.log(`[GUARDAR_ACUMULATIVA] Creado nuevo AssessmentFormId: ${assessmentFormId}`);
          
          // Intentar actualizar campos adicionales si es posible
          try {
            await new sql.Request(transaction)
              .input('assessmentFormId', sql.Int, assessmentFormId)
              .input('formNumber', sql.NVarChar, assessmentIdentifier)
              .query(`
                UPDATE AssessmentForm
                SET FormNumber = @formNumber
                WHERE AssessmentFormId = @assessmentFormId
              `);
          } catch (updateError) {
            console.log('[GUARDAR_ACUMULATIVA] No se pudieron actualizar campos adicionales, pero el formulario ya está creado');
          }
        } else {
          console.log('[GUARDAR_ACUMULATIVA] No se pudo crear AssessmentForm, continuando sin él');
        }
      } catch (formError) {
        console.error('[GUARDAR_ACUMULATIVA] Error al crear AssessmentForm:', formError.message);
        console.log('[GUARDAR_ACUMULATIVA] Intentando inserción mínima...');
        
        // Intento de inserción mínima con solo el campo obligatorio
        try {
          const minimalInsertResult = await new sql.Request(transaction)
            .input('assessmentId', sql.Int, assessmentId)
            .query(`
              INSERT INTO AssessmentForm (AssessmentId)
              OUTPUT INSERTED.AssessmentFormId
              VALUES (@assessmentId)
            `);
            
          if (minimalInsertResult.recordset.length > 0) {
            assessmentFormId = minimalInsertResult.recordset[0].AssessmentFormId;
            console.log(`[GUARDAR_ACUMULATIVA] Creado AssessmentFormId mínimo: ${assessmentFormId}`);
          }
        } catch (minimalError) {
          console.error('[GUARDAR_ACUMULATIVA] Error en inserción mínima:', minimalError.message);
          console.log('[GUARDAR_ACUMULATIVA] Continuando sin AssessmentForm');
        }
      }
    }
    
    // Crear las subnotas que no existan
    for (const identifier of identifiers) {
      const existingSubtest = subtestResult.recordset.find(s => s.Identifier === identifier);
      
      if (!existingSubtest) {
        console.log(`[GUARDAR_ACUMULATIVA] Creando AssessmentSubtest para identifier: ${identifier}`);
        
        // Determinar peso y título basados en el identifier
        let weight = 50; // Peso predeterminado
        let title = `Subnota ${identifier.split('.')[1] || '1'}`; // Extraer número después del punto
        
        // MEJORA 4: Buscar peso en el payload si existe
        const subnotaEjemplo = subnotas.find(s => s.identifier === identifier);
        if (subnotaEjemplo && subnotaEjemplo.weight) {
          weight = subnotaEjemplo.weight;
        }
        
        // MEJORA 2: Usar tipo 1 para subnotas según estándar CEDS
        const insertSubtestQuery = `
          INSERT INTO AssessmentSubtest (
            Identifier, 
            Title, 
            Description,
            RefAssessmentSubtestTypeId,
            WeightPercent,
            AssessmentFormId
          )
          OUTPUT INSERTED.AssessmentSubtestId
          VALUES (
            @identifier,
            @title,
            @description,
            @refAssessmentSubtestTypeId,
            @weightPercent,
            @assessmentFormId
          )
        `;
        
        const subtestInsertRequest = new sql.Request(transaction)
          .input('identifier', sql.NVarChar, identifier)
          .input('title', sql.NVarChar, title)
          .input('description', sql.NVarChar, `${title} para evaluación ${assessmentIdentifier}`)
          .input('refAssessmentSubtestTypeId', sql.Int, 1) // MEJORA 2: Tipo normal para subnotas
          .input('weightPercent', sql.Float, weight)
          .input('assessmentFormId', sql.Int, assessmentFormId);
        
        const subtestInsertResult = await subtestInsertRequest.query(insertSubtestQuery);
        
        const subtestId = subtestInsertResult.recordset[0].AssessmentSubtestId;
        subtestMap[identifier] = subtestId;
        console.log(`[GUARDAR_ACUMULATIVA] Creado AssessmentSubtest ${identifier} con id: ${subtestId}`);
      } else {
        subtestMap[identifier] = existingSubtest.AssessmentSubtestId;
        
        // Si el subtest existe pero no tiene AssessmentFormId, actualizarlo
        if (assessmentFormId && (!existingSubtest.AssessmentFormId || existingSubtest.AssessmentFormId === null)) {
          console.log(`[GUARDAR_ACUMULATIVA] Actualizando AssessmentFormId para subtest existente ${existingSubtest.AssessmentSubtestId}`);
          
          await new sql.Request(transaction)
            .input('subtestId', sql.Int, existingSubtest.AssessmentSubtestId)
            .input('assessmentFormId', sql.Int, assessmentFormId)
            .query(`
              UPDATE AssessmentSubtest
              SET AssessmentFormId = @assessmentFormId
              WHERE AssessmentSubtestId = @subtestId
            `);
        }
      }
    }
    
    // Obtener todos los subtests actualizados
    const updatedSubtestRequest = new sql.Request(transaction);
    identifiers.forEach((id, index) => {
      updatedSubtestRequest.input(`id${index}`, sql.NVarChar, id);
    });
    
    const updatedSubtestResult = await updatedSubtestRequest.query(subtestQuery);
    
    // Crear un mapa de identifier -> AssessmentSubtestId para facilitar la búsqueda
    updatedSubtestResult.recordset.forEach(subtest => {
      subtestMap[subtest.Identifier] = subtest.AssessmentSubtestId;
    });
    
    console.log(`[GUARDAR_ACUMULATIVA] Mapa de subtests: ${JSON.stringify(subtestMap)}`);

    // Agrupar subnotas por personId para procesar cada estudiante una sola vez
    const estudiantesPorId = {};
    
    for (const subnota of subnotas) {
      const { personId, identifier, score } = subnota;
      
      if (!personId || score === null || score === undefined || isNaN(parseFloat(score))) {
        continue;
      }
      
      if (!estudiantesPorId[personId]) {
        estudiantesPorId[personId] = {
          personId,
          organizationPersonRoleId: subnota.organizationPersonRoleId,
          assessmentRegistrationId: subnota.assessmentRegistrationId,
          nombre: subnota.nombre,
          subnotas: []
        };
      }
      
      estudiantesPorId[personId].subnotas.push({
        identifier,
        score: parseFloat(score),
        weight: subnota.weight || 50 // MEJORA 4: Usar peso del frontend
      });
    }
    
    // Procesar cada estudiante una sola vez
    for (const personId in estudiantesPorId) {
      const estudiante = estudiantesPorId[personId];
      
      console.log(`[GUARDAR_ACUMULATIVA] Procesando alumno: ${JSON.stringify({
        personId: estudiante.personId,
        organizationPersonRoleId: estudiante.organizationPersonRoleId,
        notasRecibidas: estudiante.subnotas.length,
        registrationIdRecibido: estudiante.assessmentRegistrationId
      })}`);

      // Buscar o crear AssessmentRegistration para este alumno
      let registrationId = estudiante.assessmentRegistrationId;

      if (!registrationId || isNaN(parseInt(registrationId))) {
        console.log(`[GUARDAR_ACUMULATIVA] registrationId nulo o inválido para PersonId ${estudiante.personId}. Buscando o creando.`);
        
        // Buscar si existe un AssessmentRegistration para este alumno y esta administración
        const regResult = await new sql.Request(transaction)
          .input('personId', sql.Int, estudiante.personId)
          .input('assessmentAdministrationId', sql.Int, assessmentAdministrationId)
          .query(`
            SELECT AssessmentRegistrationId
            FROM AssessmentRegistration
            WHERE PersonId = @personId AND AssessmentAdministrationId = @assessmentAdministrationId
          `);
        
        if (regResult.recordset.length > 0) {
          registrationId = regResult.recordset[0].AssessmentRegistrationId;
          console.log(`[GUARDAR_ACUMULATIVA] AssessmentRegistrationId encontrado: ${registrationId}`);
        } else {
          console.log(`[GUARDAR_ACUMULATIVA] No se encontró AssessmentRegistrationId existente. Creando nuevo para PersonId ${estudiante.personId}.`);
          
          // Crear un nuevo AssessmentRegistration
          const insertResult = await new sql.Request(transaction)
            .input('assessmentAdministrationId', sql.Int, assessmentAdministrationId)
            .input('personId', sql.Int, estudiante.personId)
            .input('organizationId', sql.Int, asignaturaId)
            .input('courseSectionOrganizationId', sql.Int, asignaturaId)
            .query(`
              INSERT INTO AssessmentRegistration (
                AssessmentAdministrationId,
                PersonId,
                OrganizationId,
                CourseSectionOrganizationId
              )
              OUTPUT INSERTED.AssessmentRegistrationId
              VALUES (
                @assessmentAdministrationId,
                @personId,
                @organizationId,
                @courseSectionOrganizationId
              )
            `);
          
          registrationId = insertResult.recordset[0].AssessmentRegistrationId;
          console.log(`[GUARDAR_ACUMULATIVA] Nuevo AssessmentRegistrationId creado: ${registrationId}`);
          registrosCreados++;
        }
      }

      // NUEVO: Eliminar registros de notas directas (IsAverage = 0, AssessmentSubtestId = NULL)
      const deleteDirectResult = await new sql.Request(transaction)
        .input('registrationId', sql.Int, registrationId)
        .input('assessmentId', sql.Int, assessmentId)
        .query(`
          DELETE ar FROM AssessmentResult ar
          INNER JOIN AssessmentRegistration reg ON ar.AssessmentRegistrationId = reg.AssessmentRegistrationId
          INNER JOIN AssessmentAdministration aa ON reg.AssessmentAdministrationId = aa.AssessmentAdministrationId
          INNER JOIN Assessment_AssessmentAdministration aaa ON aa.AssessmentAdministrationId = aaa.AssessmentAdministrationId
          WHERE ar.AssessmentRegistrationId = @registrationId
            AND aaa.AssessmentId = @assessmentId
            AND ar.IsAverage = 0
            AND ar.AssessmentSubtestId IS NULL;
        `);
      
      notasDirectasEliminadas += deleteDirectResult.rowsAffected[0];
      console.log(`[GUARDAR_ACUMULATIVA] Notas directas eliminadas para registrationId ${registrationId}: ${deleteDirectResult.rowsAffected[0]}`);

      // Eliminar notas y grupos previos de este alumno para este assessment
      await new sql.Request(transaction)
        .input('assessmentRegistrationId', sql.Int, registrationId)
        .input('assessmentId', sql.Int, assessmentId)
        .query(`
          -- Primero eliminar los resultados asociados a grupos para este alumno y assessment
          DELETE FROM AssessmentResult
          WHERE AssessmentResultGroupId IN (
            SELECT AssessmentResultGroupId 
            FROM AssessmentResultGroup 
            WHERE AssessmentRegistrationId = @assessmentRegistrationId 
            AND AssessmentId = @assessmentId
          );
          
          -- Luego eliminar los grupos
          DELETE FROM AssessmentResultGroup
          WHERE AssessmentRegistrationId = @assessmentRegistrationId
          AND AssessmentId = @assessmentId;
        `);

      console.log(`[GUARDAR_ACUMULATIVA] Notas y grupos previos eliminados para registrationId: ${registrationId}`);

      // Crear un único grupo de resultados para este estudiante
      const groupResult = await new sql.Request(transaction)
        .input('creationDate', sql.DateTime, new Date())
        .input('assessmentId', sql.Int, assessmentId)
        .input('registrationId', sql.Int, registrationId)
        .input('description', sql.NVarChar, `Grupo de notas acumulativas para ${assessmentIdentifier}`)
        .query(`
          INSERT INTO AssessmentResultGroup (
            CreationDate, 
            AssessmentId, 
            AssessmentRegistrationId, 
            Description
          )
          OUTPUT INSERTED.AssessmentResultGroupId
          VALUES (
            @creationDate, 
            @assessmentId, 
            @registrationId, 
            @description
          )
        `);
        
      const assessmentResultGroupId = groupResult.recordset[0].AssessmentResultGroupId;
      console.log(`[GUARDAR_ACUMULATIVA] Nuevo AssessmentResultGroupId: ${assessmentResultGroupId}`);
      gruposCreados++;

      // Insertar todas las subnotas para este estudiante
      for (const subnota of estudiante.subnotas) {
        const { identifier, score } = subnota;
        const assessmentSubtestId = subtestMap[identifier];
        
        if (!assessmentSubtestId) {
          console.warn(`[GUARDAR_ACUMULATIVA] No se encontró AssessmentSubtestId para identifier ${identifier}`);
          continue;
        }
        
        await new sql.Request(transaction)
          .input('registrationId', sql.Int, registrationId)
          .input('subtestId', sql.Int, assessmentSubtestId)
          .input('score', sql.NVarChar, score.toString())
          .input('groupId', sql.Int, assessmentResultGroupId)
          .input('isAverage', sql.Bit, 0)
          .query(`
            INSERT INTO AssessmentResult (
              AssessmentRegistrationId,
              AssessmentSubtestId,
              ScoreValue,
              AssessmentResultGroupId,
              IsAverage
            )
            VALUES (
              @registrationId,
              @subtestId,
              @score,
              @groupId,
              @isAverage
            )
          `);
        
        console.log(`[GUARDAR_ACUMULATIVA] Subnota insertada: regId=${registrationId}, subtestId=${assessmentSubtestId}, score=${score}, identifier=${identifier}`);
        notasInsertadas++;
      }

      // Calcular promedio para este alumno
      let promedioCalculado = 0;
      let sumaPonderada = 0;
      let sumaPesos = 0;
      
      // Calcular promedio con los datos que tenemos
      for (const subnota of estudiante.subnotas) {
        const peso = subnota.weight / 100;
        sumaPonderada += subnota.score * peso;
        sumaPesos += peso;
      }
      
      if (sumaPesos > 0) {
        promedioCalculado = Math.round((sumaPonderada / sumaPesos) * 10) / 10;
      } else if (estudiante.subnotas.length > 0) {
        // Si no hay pesos, calcular promedio simple
        let suma = 0;
        for (const subnota of estudiante.subnotas) {
          suma += subnota.score;
        }
        promedioCalculado = Math.round((suma / estudiante.subnotas.length) * 10) / 10;
      }
      
      console.log(`[GUARDAR_ACUMULATIVA] Promedio calculado: ${promedioCalculado} (sumaPonderada=${sumaPonderada}, sumaPesos=${sumaPesos})`);

      // Insertar el promedio final
      try {
        await new sql.Request(transaction)
          .input('registrationId', sql.Int, registrationId)
          .input('promedio', sql.NVarChar, promedioCalculado.toString())
          .input('groupId', sql.Int, assessmentResultGroupId)
          .input('isAverage', sql.Bit, 1)
          .query(`
            INSERT INTO AssessmentResult (
              AssessmentRegistrationId,
              ScoreValue,
              AssessmentResultGroupId,
              IsAverage
            )
            VALUES (
              @registrationId,
              @promedio,
              @groupId,
              @isAverage
            )
          `);

        console.log(`[GUARDAR_ACUMULATIVA] Promedio insertado exitosamente: regId=${registrationId}, promedio=${promedioCalculado}`);
        promediosInsertados++;
      } catch (insertAvgError) {
        console.error(`[ERROR] Error al insertar promedio en BD para registrationId ${registrationId}:`, insertAvgError);
      }
    }

    // Si llegamos aquí sin errores no capturados, la transacción puede ser commiteada
    await transaction.commit();
    console.log(`[GUARDAR_ACUMULATIVA] Proceso finalizado exitosamente. Estadísticas: Notas insertadas: ${notasInsertadas}, Promedios insertados: ${promediosInsertados}, Registros omitidos: ${registrosOmitidos}, Registros creados: ${registrosCreados}, Grupos creados: ${gruposCreados}, Notas directas eliminadas: ${notasDirectasEliminadas}`);
    
    return res.status(200).json({
      success: true,
      message: 'Notas acumulativas guardadas correctamente',
      stats: {
        notasInsertadas,
        promediosInsertados,
        registrosOmitidos,
        registrosCreados,
        gruposCreados,
        notasDirectasEliminadas
      }
    });

  

  } catch (error) {
    // Si hay un error en cualquier punto, hacemos rollback de la transacción
    try {
      console.error('[GUARDAR_ACUMULATIVA][ERROR] Falló la transacción:', error);
      await transaction.rollback();
    } catch (rollbackError) {
      console.error('[GUARDAR_ACUMULATIVA][ERROR] Error al hacer rollback:', rollbackError);
    }

    return res.status(500).json({
      success: false,
      message: 'Error al guardar notas acumulativas',
      error: error.message
    });
  }
};



